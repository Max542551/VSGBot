from aiogram import types
from aiogram.dispatcher import FSMContext

from database.database import User
from database.get_to_db import get_passenger_by_phone
from loader import bot, dp
from states.admin_states import UserInfoState


def generate_passenger_keyboard():
    passengers = User.select()
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    for passenger in passengers:
        btn = types.InlineKeyboardButton(f'{passenger.name}', callback_data=f'infor_passenger_{passenger.user_id}')
        inline_kb.add(btn)
    return inline_kb


def generate_passenger_info_keyboard(passenger_id):
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    btn_deactivate = types.InlineKeyboardButton("üö∑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                                                callback_data=f'toggles_passenger_{passenger_id}')
    btn_change_name = types.InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                                                 callback_data=f'changes_name_passenger_{passenger_id}')
    inline_kb.add(btn_deactivate, btn_change_name)
    return inline_kb


def generate_passenger_info(passenger):
    passenger_status = "üü•" if not passenger.is_active else "üü©"
    link = f"<a href='tg://user?id={passenger.user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª—Å</a>"
    info_text = (f"üë§ <b>–ò–º—è:</b> {passenger.name}\n\n"
                 f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {passenger.phone}\n\n"
                 f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {passenger.rating}\n\n"
                 f"{passenger_status} <b>–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if passenger.is_active else '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}\n\n"
                 f"{link}")
    return info_text


@dp.callback_query_handler(lambda c: c.data == 'passtogle')
async def toggle_passenger_activation(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:")
    await UserInfoState.REQUEST_PHONE.set()


@dp.message_handler(state=UserInfoState.REQUEST_PHONE, content_types=types.ContentTypes.TEXT)
async def passenger_by_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    # –ó–¥–µ—Å—å –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    passenger = get_passenger_by_phone(phone_number)
    if passenger:
        inline_kb = generate_passenger_info_keyboard(passenger.user_id)
        info_text = generate_passenger_info(passenger)
        await bot.send_message(message.from_user.id, info_text, reply_markup=inline_kb, parse_mode='html')
    else:
        await bot.send_message(message.from_user.id, "ü§∑‚Äç‚ôÇÔ∏è –ü–∞—Å—Å–∞–∂–∏—Ä —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('toggles_passenger_'))
async def process_passenger_toggle(callback_query: types.CallbackQuery):
    passenger_id = int(callback_query.data.split('_')[2])
    passenger = User.get(User.user_id == passenger_id)

    if not passenger.is_active:
        passenger.is_active = True
        await bot.send_message(callback_query.from_user.id, f'‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä {passenger.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ')
        await bot.send_message(passenger.user_id, 'üéâ –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    else:
        passenger.is_active = False
        await bot.send_message(callback_query.from_user.id, f'‚ùå –ü–∞—Å—Å–∞–∂–∏—Ä {passenger.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùå')
        await bot.send_message(passenger.user_id, '‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')

    passenger.save()

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Å—Å–∞–∂–∏—Ä–µ
    info_text = generate_passenger_info(passenger)
    keyboard = generate_passenger_info_keyboard(passenger_id)
    await bot.edit_message_text(text=info_text, chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id, parse_mode='html', reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('changes_name_passenger_'), state='*')
async def prompt_passenger_name(callback_query: types.CallbackQuery, state: FSMContext):
    await UserInfoState.CHANGE_NAME.set()
    user_id = int(callback_query.data.split('_')[3])
    await state.update_data(user_id=user_id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞:")


@dp.message_handler(state=UserInfoState.CHANGE_NAME, content_types=types.ContentTypes.TEXT)
async def update_passenger_name(message: types.Message, state: FSMContext):
    new_name = message.text
    async with state.proxy() as data:
        user_id = data['user_id']
    user = User.get(User.user_id == user_id)

    try:
        user.name = new_name
        user.save()
        await message.answer(f"‚úÖ –ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
    except User.DoesNotExist:
        await message.answer("–ü–∞—Å—Å–∞–∂–∏—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    finally:
        await state.finish()
