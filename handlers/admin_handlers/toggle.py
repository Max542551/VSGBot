from aiogram import types
from aiogram.dispatcher import FSMContext

from database.database import Taxi
from database.get_to_db import get_taxi, get_taxi_by_phone
from loader import bot, dp
from states.admin_states import TaxiDriverInfoState


def generate_keyboard():
    taxis = Taxi.select()
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    for taxi in taxis:
        taxi_status = "üü•" if taxi.admin_deactivated else "üü©"
        btn = types.InlineKeyboardButton(f'{taxi_status} {taxi.name} | {taxi.registration_number}',
                                         callback_data=f'info_{taxi.user_id}')
        inline_kb.add(btn)
    return inline_kb


def generate_taxi_info_keyboard(taxi_id):
    inline_kb = types.InlineKeyboardMarkup(row_width=1)
    btn_deactivate = types.InlineKeyboardButton("üö∑ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'toggle_{taxi_id}')
    btn_change_car = types.InlineKeyboardButton("üöñ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data=f'change_car_{taxi_id}')
    btn_change_color = types.InlineKeyboardButton("üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data=f'change_color_{taxi_id}')
    btn_change_number = types.InlineKeyboardButton("üé∞ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Å. –Ω–æ–º–µ—Ä", callback_data=f'change_number_{taxi_id}')
    btn_change_balance = types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f'change_balance_{taxi_id}')
    btn_change_name = types.InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f'change_name_{taxi_id}')
    btn_end_shift = types.InlineKeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É", callback_data=f'end_shift_{taxi_id}')
    inline_kb.add(btn_deactivate, btn_change_car, btn_change_color, btn_change_number, btn_change_balance,
                  btn_change_name, btn_end_shift)
    return inline_kb


@dp.callback_query_handler(lambda c: c.data == 'toggle_driver')
async def request_phone_number(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:")
    await TaxiDriverInfoState.REQUEST_PHONE.set()


@dp.callback_query_handler(lambda c: c.data.startswith('toggle_'))
async def process_driver_toggle(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[1])
    taxi = Taxi.get(Taxi.user_id == taxi_id)
    if not taxi.admin_deactivated:
        taxi.admin_deactivated = True
        await bot.send_message(callback_query.from_user.id, f'‚ùå –í–æ–¥–∏—Ç–µ–ª—å {taxi.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùå')
        await bot.send_message(taxi.user_id, '‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    else:
        taxi.admin_deactivated = False
        await bot.send_message(callback_query.from_user.id, f'‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {taxi.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ')
        await bot.send_message(taxi.user_id, 'üéâ –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    taxi.save()

    # generate a new keyboard and replace the old one
    new_keyboard = generate_taxi_info_keyboard(taxi_id)
    info_text = generate_taxi_info(taxi)
    await bot.edit_message_text(text=info_text, chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id, reply_markup=new_keyboard,
                                parse_mode='html')


def generate_taxi_info(taxi):
    taxi_status = "üü•" if taxi.admin_deactivated else "üü©"
    link = f"<a href='tg://user?id={taxi.user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª—Å</a>"
    info_text = (f"üë§ <b>–ò–º—è:</b> {taxi.name}\n\n"
                 f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {taxi.phone}\n\n"
                 f"‚≠êÔ∏è <b>–†–µ–π—Ç–∏–Ω–≥:</b> {taxi.rating}\n\n\n"
                 f"üöñ <b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {taxi.car}\n\n"
                 f"üé® <b>–¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {taxi.color_car}\n\n"
                 f"üé∞ <b>–ì–æ—Å. –ù–æ–º–µ—Ä:</b> {taxi.registration_number}\n\n"
                 f"{taxi_status} <b>–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> {'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if not taxi.admin_deactivated else '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}\n\n"
                 f"{link}")
    return info_text


@dp.message_handler(state=TaxiDriverInfoState.REQUEST_PHONE, content_types=types.ContentTypes.TEXT)
async def get_driver_by_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    # Here you will need a function to fetch a taxi driver by phone number
    taxi = get_taxi_by_phone(phone_number)
    if taxi:
        inline_kb = generate_taxi_info_keyboard(taxi.user_id)
        info_text = generate_taxi_info(taxi)
        await bot.send_message(message.from_user.id, info_text, reply_markup=inline_kb, parse_mode='html')
    else:
        await bot.send_message(message.from_user.id, "ü§∑‚Äç‚ôÇÔ∏è –í–æ–¥–∏—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('change_car_'))
async def process_change_car(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[2])
    await state.update_data(taxi_id=taxi_id)
    await bot.edit_message_text(text="üöñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await TaxiDriverInfoState.CHANGE_CAR.set()


@dp.message_handler(state=TaxiDriverInfoState.CHANGE_CAR)
async def handle_change_car(message: types.Message, state: FSMContext):
    new_car = message.text
    async with state.proxy() as data:
        taxi_id = data['taxi_id']
    taxi = Taxi.get(Taxi.user_id == taxi_id)
    taxi.car = new_car
    taxi.save()
    await bot.send_message(message.from_user.id, f"‚úÖ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_car}</b>",
                           parse_mode='html')
    await state.finish()


# –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ –Ω–æ–º–µ—Ä–∞


@dp.callback_query_handler(lambda c: c.data.startswith('change_color_'))
async def process_change_color(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[2])
    await state.update_data(taxi_id=taxi_id)
    await bot.edit_message_text(text="üé® –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await TaxiDriverInfoState.CHANGE_COLOR.set()


@dp.message_handler(state=TaxiDriverInfoState.CHANGE_COLOR)
async def handle_change_color(message: types.Message, state: FSMContext):
    new_color = message.text
    async with state.proxy() as data:
        taxi_id = data['taxi_id']
    taxi = Taxi.get(Taxi.user_id == taxi_id)
    taxi.color_car = new_color
    taxi.save()
    await bot.send_message(message.from_user.id, f"‚úÖ –¶–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_color}</b>",
                           parse_mode='html')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('change_number_'))
async def process_change_number(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[2])
    await state.update_data(taxi_id=taxi_id)
    await bot.edit_message_text(text="üé∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await TaxiDriverInfoState.CHANGE_NUMBER.set()


@dp.message_handler(state=TaxiDriverInfoState.CHANGE_NUMBER)
async def handle_change_number(message: types.Message, state: FSMContext):
    new_number = message.text.upper()
    async with state.proxy() as data:
        taxi_id = data['taxi_id']
    taxi = Taxi.get(Taxi.user_id == taxi_id)
    taxi.registration_number = new_number
    taxi.save()
    await bot.send_message(message.from_user.id, f"‚úÖ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_number}</b>",
                           parse_mode='html')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('change_balance_'))
async def process_change_balance(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[2])
    taxi = await get_taxi(taxi_id)
    await state.update_data(taxi_id=taxi_id)
    await bot.edit_message_text(text=f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è: {taxi.balance}\n\n"
                                     "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await TaxiDriverInfoState.CHANGE_BALANCE.set()


@dp.message_handler(state=TaxiDriverInfoState.CHANGE_BALANCE)
async def handle_change_balance(message: types.Message, state: FSMContext):
    new_balance = message.text
    async with state.proxy() as data:
        taxi_id = data['taxi_id']
    taxi = Taxi.get(Taxi.user_id == taxi_id)
    taxi.balance = new_balance  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–µ 'balance' –≤ –º–æ–¥–µ–ª–∏ Taxi
    taxi.save()
    await bot.send_message(message.from_user.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_balance}</b> —Ä—É–±",
                           parse_mode='html')
    await bot.send_message(taxi_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{new_balance}</b> —Ä—É–±", parse_mode='html')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('change_name_'), state='*')
async def prompt_taxi_name(callback_query: types.CallbackQuery, state: FSMContext):
    await TaxiDriverInfoState.CHANGE_NAME.set()
    taxi_id = int(callback_query.data.split('_')[2])
    await state.update_data(taxi_id=taxi_id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–∞–∫—Å–∏—Å—Ç–∞:")


@dp.message_handler(state=TaxiDriverInfoState.CHANGE_NAME, content_types=types.ContentTypes.TEXT)
async def update_taxi_name(message: types.Message, state: FSMContext):
    new_name = message.text
    async with state.proxy() as data:
        taxi_id = data['taxi_id']
    taxi = Taxi.get(Taxi.user_id == taxi_id)

    try:
        taxi.name = new_name
        taxi.save()
        await message.answer(f"‚úÖ –ò–º—è —Ç–∞–∫—Å–∏—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
    except Taxi.DoesNotExist:
        await message.answer("–¢–∞–∫—Å–∏—Å—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('end_shift_'))
async def process_end_shift(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    taxi_id = int(callback_query.data.split('_')[2])
    taxi = Taxi.get(Taxi.user_id == taxi_id)

    if taxi.shift:
        taxi.shift = False
        taxi.save()
        await bot.send_message(callback_query.from_user.id, f'‚úÖ –°–º–µ–Ω–∞ –¥–ª—è {taxi.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ')
        await bot.send_message(taxi.user_id, 'üõë –í–∞—à–∞ —Å–º–µ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    else:
        await bot.send_message(callback_query.from_user.id, f'‚ùóÔ∏è –°–º–µ–Ω–∞ –¥–ª—è {taxi.name} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚ùóÔ∏è')

