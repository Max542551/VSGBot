from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from peewee import DoesNotExist

from database.database import Order
from database.get_to_db import get_user, get_taxi, get_order_by_id
from keyboards.inline.orders_inline.user_order_inline.cancel_order import cancel_order_buttons
from keyboards.inline.orders_inline.user_order_inline.rating import get_rating_keyboard, get_user_rating_keyboard
from loader import dp, bot
from states.admin_states import AdminFindOrder
from states.order_states import OrderStatus


def order_management_buttons(order_id):
    markup = InlineKeyboardMarkup(row_width=1)
    start_trip_button = InlineKeyboardButton("üö¶ –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"start_trip_{order_id}")
    complete_trip_button = InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data=f"complete_trip_{order_id}")
    cancel_order_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")

    markup.add(start_trip_button, complete_trip_button, cancel_order_button)
    return markup


@dp.callback_query_handler(lambda c: c.data == 'find_order')
async def admin_find_order(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await AdminFindOrder.waiting_for_order_number.set()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")


@dp.message_handler(state=AdminFindOrder.waiting_for_order_number)
async def order_info(message: types.Message, state: FSMContext):
    order_id = message.text
    order = Order.get_or_none(Order.id == order_id)

    if order:
        user = await get_user(order.user_id)
        taxi = await get_taxi(order.taxi_id)
        order_info = f"‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order_id}:\n\n\n" \
                     f"üë•Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {order.count_passanger}\n\n" \
                     f"üë• <b>–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {user.name}\n\n" \
                     f"üì± <b>–ù–æ–º–µ—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {user.phone}\n\n\n" \
                     f"üë® <b>–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è:</b> {taxi.name if order.taxi_id else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n" \
                     f"üöñ <b>–¶–≤–µ—Ç/–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {taxi.color_car if order.taxi_id else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'} {taxi.car if order.taxi_id else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n" \
                     f"üé∞ <b>–ì–æ—Å. –ù–æ–º–µ—Ä:</b> {taxi.registration_number if order.taxi_id else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n\n\n" \
                     f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order.first_address}\n\n" \
                     f"üìç <b>–ö—É–¥–∞:</b> {order.second_address}\n\n" \
                     f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: </b> {order.cost}\n\n" \
                     f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n\n" \
                     f"üë∂ <b>–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ:</b> {order.child_seat}\n\n" \
                     f"üíµ <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b> {order.payment_method}\n\n" \
                     f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order.comment}\n\n" \
                     f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {order.rating}"
        await bot.send_message(message.from_user.id, order_info, parse_mode='html',
                               reply_markup=order_management_buttons(order_id))
    else:
        await bot.send_message(message.from_user.id, "ü§∑‚Äç‚ôÇÔ∏è –ó–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π


@dp.callback_query_handler(lambda c: c.data.startswith('start_trip_'))
async def start_trip(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[-1]

    try:
        order = Order.get_by_id(order_id)
        order.status = OrderStatus.TRIP  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.save()

        await bot.send_message(order.user_id, "üöïüí® –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ ‚ù§Ô∏è")
        await bot.send_message(order.taxi_id, "üöïüí® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∞–ª –≤–∞—à—É –ø–æ–µ–∑–¥–∫—É!\n\n"
                                              "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    except DoesNotExist:
        await bot.send_message(callback_query.from_user.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.callback_query_handler(lambda c: c.data.startswith('complete_trip_'))
async def complete_trip(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[-1]
    order = get_order_by_id(order_id)
    taxi = await get_taxi(order.taxi_id)

    try:
        order = Order.get_by_id(order_id)
        order.status = OrderStatus.COMPLETED  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.save()

        await bot.send_message(
            chat_id=order.user_id,
            text="‚úÖ –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n\n"
                 "ü§ó –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n"
                 "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å üòç\n\n"
                 "üå† –û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –ø–æ–µ–∑–¥–∫—É",
            reply_markup=get_rating_keyboard(order.id)
        )

        await bot.send_message(
            chat_id=taxi.user_id,
            text="‚úÖ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n\n"
                 "üå† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞",
            reply_markup=get_user_rating_keyboard(order.user_id)
        )

        taxi.is_busy = False
        taxi.daily_order_count += 1
        taxi.daily_earnings += order.cost
        taxi.save()


    except DoesNotExist:
        await bot.send_message(callback_query.from_user.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
