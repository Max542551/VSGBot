from aiogram import types
from aiogram.dispatcher import FSMContext

from database.get_to_db import get_user, get_taxi
from handlers.taxi_handlers import main_menu_taxi
from handlers.user_handlers import main_menu_user
from keyboards.inline.welcome import generate_welcome_keyboard
from loader import dp, bot
from states.taxi_states import TaxiRegistrationState
from states.user_states import UserRegistrationState


@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user = await get_user(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await –∑–¥–µ—Å—å
    taxi = await get_taxi(user_id)

    if user and taxi is not None:
        if not taxi.is_active:
            await main_menu_user.main_menu(message)
        else:
            await main_menu_taxi.main_menu_taxi(message)
    elif user:
        await main_menu_user.main_menu(message)
    elif taxi:
        await main_menu_taxi.main_menu_taxi(message)
    else:
        welcome_message = "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–¢–∞–∫—Å–∏ –ë–æ—Ç–∞ –≥.–í–µ—Ä—Ö–Ω–∏–π –¢–∞–≥–∏–ª</b>! üéâ\n\n" \
                          "üöÄ –ú—É —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –í—ã –æ—Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–æ—Ç–∞. \n\n" \
                          "üôÉ –í –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –±–æ—Ç—É?\n\n" \

        await message.reply(welcome_message, reply_markup=generate_welcome_keyboard(), reply=False, parse_mode='html')


@dp.callback_query_handler(lambda c: c.data == 'passenger')
async def process_callback_passenger(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text('üîÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id)
    await UserRegistrationState.name.set()


@dp.callback_query_handler(lambda c: c.data == 'taxi')
async def process_callback_taxi(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        "üöñ –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã! üéâ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –í–∞—à–µ–≥–æ –∞–≤—Ç–æ —á—Ç–æ–±—ã –±—ã–ª —á–∏—Ç–∞–±–µ–ª–µ–Ω –≥–æ—Å.–Ω–æ–º–µ—Ä\n"
            "<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            "–§–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        parse_mode='html'
    )
    await TaxiRegistrationState.waiting_for_payment_screenshot.set()