import time
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import create_order_in_db
from database.get_to_db import get_order_by_user_id, get_user
from handlers.default_handlers.start import start
from keyboards.inline.orders_inline.pass_keyboard import passengers_keyboard
from keyboards.inline.orders_inline.user_order_inline.cancel_order import cancel_order_buttons
from keyboards.inline.orders_inline.user_order_inline.child_seat import child_seat_keyboard
from keyboards.inline.orders_inline.user_order_inline.comment import comment_keyboard
from keyboards.inline.orders_inline.user_order_inline.cost import cost_keyboard
from keyboards.inline.orders_inline.user_order_inline.payment_method import payment_keyboard
from keyboards.reply.reply_menu_user import get_main_menu_keyboard
from loader import dp, bot
from states.order_states import TaxiOrderState
from utils import message_for_taxi


@dp.callback_query_handler(lambda call: call.data == 'userdef_order', state="*")
async def deferred_order_request(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(user_id=call.from_user.id, deferred=True)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.insert(InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data="condefer"))
    keyboard.insert(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cadefer"))

    await call.message.answer(
        "‚ö†Ô∏è –í—ã —Å–æ–∑–¥–∞—ë—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –µ–≥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —è–≤–ª—è–µ—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –í—ã –∫–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä –∏ –≤–æ–¥–∏—Ç–µ–ª—å. \n\n"
        "<b> –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –≥—Ä—É–∑–æ–≤—ã—Ö –∏ –≥—Ä—É–∑–æ–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª. +79051472649</b>", 
        reply_markup=keyboard, parse_mode='html')


@dp.callback_query_handler(lambda call: call.data == 'condefer', state="*")
async def confirm_deferred_order(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="üìç –û—Ç–∫—É–¥–∞ –í–∞—Å –∑–∞–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ, –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ?\n\nüîÖ <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è (–≥.–ú–µ–ª–µ–Ω–∫–∏ —É–ª. –ú–∏—Ä–∞ –¥.1 –ø–æ–¥—ä–µ–∑–¥ 2   01.01.2025 –≤ 10.30):</b>",
                                parse_mode='html')
    await TaxiOrderState.FIRST_LOCATION.set()


@dp.callback_query_handler(lambda call: call.data == 'cadefer', state="*")
async def cancel_deferred_order(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id, text="‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞.")
    await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'order_a_taxi', state="*")
async def location_request(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    user = await get_user(user_id)

    if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(call.message, state)
        return

    if not user.is_active:
        await call.message.answer('‚ùåÔ∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return

    quick_address_keyboard = InlineKeyboardMarkup(row_width=2)
    quick_address_keyboard.insert(InlineKeyboardButton("üè† –ò–∑ –¥–æ–º–∞", callback_data="home_address"))
    quick_address_keyboard.insert(InlineKeyboardButton("üíº –° —Ä–∞–±–æ—Ç—ã", callback_data="work_address"))

    await state.update_data(user_id=call.from_user.id, deferred=False)
    await call.message.answer("üìç –û—Ç–∫—É–¥–∞ –í–∞—Å –∑–∞–±—Ä–∞—Ç—å?\n\n"
                              "üîÖ <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º ‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞):</b>", reply_markup=quick_address_keyboard,
                              parse_mode='html')
    await TaxiOrderState.FIRST_LOCATION.set()


@dp.callback_query_handler(lambda call: call.data in ["home_address", "work_address"],
                           state=TaxiOrderState.FIRST_LOCATION)
async def set_quick_first_location(call: types.CallbackQuery, state: FSMContext):
    user = await get_user(call.from_user.id)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
    chosen_address = "home_address" if call.data == "home_address" else "work_address"
    address_to_use = user.home_address if chosen_address == "home_address" else user.work_address

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not address_to_use:
        await bot.answer_callback_query(call.id, show_alert=True,
                                        text=f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ {'–¥–æ–º–∞' if chosen_address == 'home_address' else '—Ä–∞–±–æ—Ç—ã'}, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
        return

    address = user.home_address if call.data == "home_address" else user.work_address
    state_data = await state.get_data()
    state_data["first_address"] = address
    await state.set_data(state_data)

    quick_address_keyboard = InlineKeyboardMarkup(row_width=2)
    quick_address_keyboard.insert(InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="second_home_address"))
    quick_address_keyboard.insert(InlineKeyboardButton("üíº –ù–∞ —Ä–∞–±–æ—Ç—É", callback_data="second_work_address"))

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –≤—Ç–æ—Ä–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    await TaxiOrderState.SECOND_LOCATION.set()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id, text=f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {address}\n\n"
                                                                         "‚õ≥Ô∏è –ö—É–¥–∞ –µ–¥–µ–º?\n\n"
                                                                         "üîÖ <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º ‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞):</b>",
                                reply_markup=quick_address_keyboard, parse_mode='html')  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


@dp.message_handler(state=TaxiOrderState.FIRST_LOCATION)
async def handle_first_location(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["first_address"] = message.text
    await state.set_data(state_data)

    quick_address_keyboard = InlineKeyboardMarkup(row_width=2)
    quick_address_keyboard.insert(InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="second_home_address"))
    quick_address_keyboard.insert(InlineKeyboardButton("üíº –ù–∞ —Ä–∞–±–æ—Ç—É", callback_data="second_work_address"))

    await bot.send_message(message.chat.id,
                           "‚õ≥Ô∏è –ö—É–¥–∞ –µ–¥–µ–º?\n\n"
                           "üîÖ <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º ‚Ññ –ø–æ–¥—ä–µ–∑–¥–∞):</b>", reply_markup=quick_address_keyboard,
                           parse_mode='html')

    await TaxiOrderState.SECOND_LOCATION.set()


@dp.callback_query_handler(lambda call: call.data in ["second_home_address", "second_work_address"],
                           state=TaxiOrderState.SECOND_LOCATION)
async def set_quick_second_location(call: types.CallbackQuery, state: FSMContext):
    user = await get_user(call.from_user.id)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
    chosen_address = "second_home_address" if call.data == "second_home_address" else "second_work_address"
    address_to_use = user.home_address if chosen_address == "second_home_address" else user.work_address

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not address_to_use:
        await bot.answer_callback_query(call.id, show_alert=True,
                                        text=f"‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ {'–¥–æ–º–∞' if chosen_address == 'second_home_address' else '—Ä–∞–±–æ—Ç—ã'}, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
        return

    address = user.home_address if call.data == "second_home_address" else user.work_address

    state_data = await state.get_data()
    state_data["second_address"] = address
    await state.set_data(state_data)
    # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ—Ç—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id, text=f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {address}\n\n"
                                                                         "üë∂ –í–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ?",
                                reply_markup=child_seat_keyboard())
    await TaxiOrderState.BABY_SEAT.set()


@dp.message_handler(state=TaxiOrderState.SECOND_LOCATION)
async def handle_second_location(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["second_address"] = message.text
    await state.set_data(state_data)
    await bot.send_message(message.chat.id, "üë∂ –í–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ?", reply_markup=child_seat_keyboard())
    await TaxiOrderState.BABY_SEAT.set()


@dp.callback_query_handler(state=TaxiOrderState.BABY_SEAT, text=["–ù—É–∂–Ω–æ", "–ù–µ –Ω—É–∂–Ω–æ"])
async def handle_baby_seat(call: types.CallbackQuery, state: FSMContext):
    if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(call.message, state)
        return

    state_data = await state.get_data()
    state_data["child_seat"] = call.data
    await state.set_data(state_data)
    await bot.edit_message_text("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:",
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                reply_markup=await passengers_keyboard())
    await TaxiOrderState.PASSENGERS.set()


@dp.callback_query_handler(state=TaxiOrderState.PASSENGERS, text_startswith="passenger_")
async def handle_passengers(call: types.CallbackQuery, state: FSMContext):
    passengers_count = int(call.data.split('_')[1])
    await state.update_data(count_passanger=passengers_count)

    await bot.edit_message_text("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", chat_id=call.message.chat.id,
                                message_id=call.message.message_id, reply_markup=payment_keyboard())

    await TaxiOrderState.PAYMENT_METHOD.set()


@dp.callback_query_handler(state=TaxiOrderState.PAYMENT_METHOD, text=["–ù–∞–ª–∏—á–Ω—ã–µ", "–ü–µ—Ä–µ–≤–æ–¥"])
async def handle_payment(call: types.CallbackQuery, state: FSMContext):
    if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(call.message, state)
        return

    state_data = await state.get_data()
    state_data["payment_method"] = call.data
    await state.set_data(state_data)

    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id, "üí∞ –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                           reply_markup=cost_keyboard())
    await TaxiOrderState.COST.set()


@dp.callback_query_handler(state=TaxiOrderState.COST, text=["specify_amount", "request_offers"])
async def handle_cost(call: types.CallbackQuery, state: FSMContext):
    if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(call.message, state)
        return

    state_data = await state.get_data()
    if call.data == "specify_amount":
        await bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–µ–∑–¥–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!):",
                                    chat_id=call.message.chat.id,
                                    message_id=call.message.message_id)
        await TaxiOrderState.SPECIFY_AMOUNT.set()
    else:
        state_data["cost"] = None
        await state.set_data(state_data)

        await bot.delete_message(call.message.chat.id, call.message.message_id)
        if state_data["deferred"]:
            await bot.send_message(call.message.chat.id,
                                   "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        else:
            await bot.send_message(call.message.chat.id,
                                   "‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
                                   reply_markup=comment_keyboard())
        await TaxiOrderState.COMMENT.set()


@dp.message_handler(state=TaxiOrderState.SPECIFY_AMOUNT, content_types=['text'])
async def handle_specify_amount(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    try:
        amount = int(message.text)
        state_data["cost"] = amount
        await state.set_data(state_data)

        if state_data["deferred"]:
            await bot.send_message(message.chat.id,
                                   "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        else:
            await bot.send_message(message.chat.id,
                                   "‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
                                   reply_markup=comment_keyboard())

        await TaxiOrderState.COMMENT.set()
    except ValueError:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@dp.message_handler(state=TaxiOrderState.COMMENT)
async def handle_comment(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["comment"] = message.text if message.text != "‚õîÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" else "-"
    first_address = state_data["first_address"]
    second_address = state_data["second_address"]

    await state.set_data(state_data)
    # —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
    create_order_in_db(state_data)
    user_id = message.chat.id
    order = get_order_by_user_id(user_id)
    cancel_order = cancel_order_buttons(order.id)

    if order:
        await bot.send_message(message.chat.id, "üëç –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                                                "–ö–æ–≥–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º!",
                               reply_markup=get_main_menu_keyboard())
        time.sleep(2)
        await message.answer("üëÄ –ò—â—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å ", reply_markup=cancel_order)

        if order.deferred:
            # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
            await message_for_taxi.notify_taxi_drivers_deffer(order, first_address, second_address)
        else:
            # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
            await message_for_taxi.notify_taxi_drivers(order, first_address, second_address)

        await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    else:
        await bot.send_message(message.chat.id,
                               "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=get_main_menu_keyboard())
