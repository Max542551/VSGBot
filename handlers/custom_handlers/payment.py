from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from config_data.config import ADMIN_IDS
from database.get_to_db import get_taxi
from handlers.admin_handlers.decision_buttons import make_decision_buttons
from loader import bot, dp
from states.taxi_states import TaxiState


@dp.callback_query_handler(text='top_up')
async def top_up(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", callback_query.message.chat.id,
                                callback_query.message.message_id)
    await TaxiState.waiting_for_top_up_amount.set()


@dp.message_handler(state=TaxiState.waiting_for_top_up_amount)
async def receive_top_up_amount(message: types.Message, state: FSMContext):
    amount = message.text
    if amount.isdigit() and int(amount) > 0:
        await state.update_data(amount=int(amount))
        await bot.send_message(message.from_user.id,
                               "üí≥ <b>2202 2022 2910 6392 (–°–±–µ—Ä)</b>\n\n"
                               "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —É–∫–∞–∑–∞–ª–∏ —Ä–∞–Ω–µ–µ\n\n"
                               "üì≤ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è, –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                               parse_mode='html')
        await TaxiState.waiting_for_payment_screenshot.set()
    else:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")


@dp.message_handler(content_types=['photo'], state=TaxiState.waiting_for_payment_screenshot)
async def receive_payment_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get('amount')

    for admin_id in ADMIN_IDS:
        await bot.forward_message(admin_id, message.chat.id, message.message_id)

        # Use the function to create decision buttons
        decision_buttons = make_decision_buttons(message.from_user.id, amount)
        await bot.send_message(admin_id,
                               f"‚ùó –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ {amount} —Ä—É–± –æ—Ç {message.from_user.full_name}.",
                               reply_markup=decision_buttons)

    await bot.send_message(message.chat.id,
                           "‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('accept') or c.data.startswith('reject'))
async def process_admin_decision(callback_query: CallbackQuery, state: FSMContext):
    action, user_id, amount = callback_query.data.split(":")
    user_id = int(user_id)
    amount = int(amount)
    taxi = await get_taxi(user_id)


    if action == "accept":
        taxi.balance += amount
        taxi.save()
        await bot.edit_message_text('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', callback_query.message.chat.id,
                                    callback_query.message.message_id)
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: {amount} —Ä—É–±")
    else:
        await bot.edit_message_text('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_query.message.chat.id, callback_query.message.message_id)
        await bot.send_message(user_id,
                               "‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    await state.finish()
