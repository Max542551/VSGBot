import re
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from config_data.config import ADMIN_IDS
from database.add_to_db import add_taxi
from handlers.admin_handlers.decision_buttons import make_registration_decision_buttons
from handlers.taxi_handlers import main_menu_taxi
from keyboards.inline.taxi_inline.child_seat import reg_child_seat_keyboard
from keyboards.reply.reply_menu_user import get_main_menu_keyboard
from states.taxi_states import TaxiRegistrationState
from loader import bot, dp


@dp.message_handler(content_types=['photo'], state=TaxiRegistrationState.waiting_for_payment_screenshot)
async def receive_registration_payment_screenshot(message: types.Message, state: FSMContext):
    for admin_id in ADMIN_IDS:
        await bot.forward_message(admin_id, message.chat.id, message.message_id)
        decision_buttons = make_registration_decision_buttons(message.from_user.id)
        await bot.send_message(admin_id,
                               f"‚ùó –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç {message.from_user.full_name} –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                               reply_markup=decision_buttons)

    await bot.send_message(message.chat.id,
                           "‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")


@dp.callback_query_handler(lambda c: c.data.startswith('reg_accept') or c.data.startswith('jer_regtaxi'))
async def process_admin_registration_decision(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(":")[1])

    if callback_query.data.startswith("reg_accept"):
        await bot.edit_message_text('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ', callback_query.message.chat.id,
                                    callback_query.message.message_id)
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        # –ó–∞–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        state = dp.current_state(chat=user_id, user=user_id)
        await state.set_state(TaxiRegistrationState.name)
        await bot.send_message(user_id, 'üîÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    elif callback_query.data.startswith("jer_regtaxi"):
        await bot.edit_message_text('‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ', callback_query.message.chat.id,
                                    callback_query.message.message_id)
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


@dp.message_handler(state=TaxiRegistrationState.name)
async def process_name_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await TaxiRegistrationState.phone.set()
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    kb.add(KeyboardButton('üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üì©', request_contact=True))

    await message.answer('üì≤ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\n\n'
                         '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üì©</b>\n'
                         'üîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩüîΩ', reply_markup=kb, parse_mode='html')


@dp.message_handler(state=TaxiRegistrationState.phone, content_types=types.ContentType.CONTACT)
async def process_phone_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number
    await TaxiRegistrationState.next()
    await message.answer('üöñ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
                         '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∏–∞ –†–∏–æ):')


@dp.message_handler(state=TaxiRegistrationState.car)
async def process_car_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['car'] = message.text
    await TaxiRegistrationState.next()
    await message.answer('üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
                         '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ë–µ–ª—ã–π):')


@dp.message_handler(state=TaxiRegistrationState.color_car)
async def process_color_car_step(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['color_car'] = message.text
    await TaxiRegistrationState.next()
    await message.answer('üé∞ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n'
                         '(–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê 777 –ê–ê 77):')


@dp.message_handler(state=TaxiRegistrationState.registration_number)
async def process_registration_number_step(message: types.Message, state: FSMContext):
    registration_number = message.text.upper()
    if not re.match(r'^[–ê-–ØA-Z]{1} \d{3} [–ê-–ØA-Z]{2} \d{2,3}$', registration_number):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ê 777 –ê–ê 77 –∏–ª–∏ –ê 777 –ê–ê 777")
        return
    async with state.proxy() as data:
        data['registration_number'] = registration_number
    await TaxiRegistrationState.next()
    await message.answer('üë∂ –£ –≤–∞—Å –µ—Å—Ç—å –¥–µ—Ç—Å–∫–∏–µ –∫—Ä–µ—Å–ª–∞?', reply_markup=reg_child_seat_keyboard())


@dp.callback_query_handler(lambda c: c.data in ['child_seat_yes', 'child_seat_no'],
                           state=TaxiRegistrationState.child_seat)
async def process_child_seat_step(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['child_seat'] = callback_query.data == 'child_seat_yes'
        user_id = callback_query.from_user.id
        add_taxi(user_id, data['name'], data['phone'], data['car'], data['color_car'], data['registration_number'],
                 data['child_seat'])
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, '‚úÖ –ö —à—Ç—É—Ä–≤–∞–ª—É, –∫–∞–ø–∏—Ç–∞–Ω!',
                           reply_markup=get_main_menu_keyboard())
    await main_menu_taxi.main_menu_taxi(callback_query.message)
    await state.finish()
