from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import save_sent_messages
from database.get_to_db import get_order_by_id, get_sent_messages, get_taxi, get_user
from keyboards.inline.taxi_inline.reply_accept_the_order import order_acceptance_keyboard_without_propose_price, \
    order_acceptance_keyboard
from loader import dp, bot
from states.order_states import OrderStatus


@dp.callback_query_handler(lambda c: 'order_defer' in c.data)
async def process_order_defer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    order_id = int(callback_query.data.split('_')[2])
    taxi_id = callback_query.from_user.id
    taxi = await get_taxi(taxi_id)
    order = get_order_by_id(order_id)

    if order.deferred_by:
        await bot.edit_message_text(text="‚õîÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id)
        return

    order.deferred_by = taxi_id
    order.status = OrderStatus.DEFERRED
    order.save()
    await bot.edit_message_text(text="‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ª–æ–∂–µ–Ω\n\n"
                                     "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(order.user_id,
                           f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                           f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ",
                           parse_mode='html')

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    sent_messages = get_sent_messages(order_id)
    for user_id, message_id in sent_messages:
        if user_id != taxi_id:
            await bot.delete_message(chat_id=user_id, message_id=message_id)

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∞–∫—Å–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    try:
        save_sent_messages(order_id, [(taxi_id, message_id)])
    except UnboundLocalError:
        pass


@dp.callback_query_handler(lambda c: 'deferred_order' in c.data)
async def process_deferred_order(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    order_id = int(callback_query.data.split('_')[2])
    order = get_order_by_id(order_id)
    if order.status == OrderStatus.CANCELED or order.status == OrderStatus.COMPLETED:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ó–∞–∫–∞–∑ –±—ã–ª —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ª–∏–±–æ –æ—Ç–º–µ–Ω–µ–Ω\n\n")
        return

    user = await get_user(order.user_id)

    cost = order.cost

    message_text = f"‚ùóÔ∏è<b>–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑</b>\n\n\n" \
                   f"üÖ∞Ô∏è <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {order.first_address}\n\n" \
                   f"üÖ±Ô∏è <b>–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.second_address}\n\n\n" \
                   f"üôã‚Äç‚ôÇÔ∏è <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {user.name}\n\n" \
                   f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b> {user.phone}\n\n\n" \
                   f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost} —Ä—É–±\n\n" \
                   f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n" \
                   f"üë∂ <b>–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ:</b> {order.child_seat}\n\n\n" \
                   f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <b>{order.comment}</b>"

    await bot.send_message(callback_query.from_user.id, text=message_text,
                           reply_markup=order_acceptance_keyboard_without_propose_price(order), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('start_order_confirmation'))
async def start_order_confirmation(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[3])
    confirm_keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–µ–∑–¥', callback_data=f'order_acceptance_{order_id}'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='otmdef')
    )
    await callback_query.message.answer(
        "‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞? –ü–∞—Å—Å–∞–∂–∏—Ä –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –í—ã –≤—ã–µ—Ö–∞–ª–∏ –∑–∞ –Ω–∏–º.",
        reply_markup=confirm_keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('reject_order_confirmation'))
async def reject_order_confirmation(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[3])
    confirm_keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫–∞–∑', callback_data=f'cancel_order_{order_id}'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='otmdef')
    )
    await callback_query.message.answer(
        "‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞? –í—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –ø–æ —Ç–µ–ª., —á—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? –ü—Ä–∏ –∂–∞–ª–æ–±–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
        reply_markup=confirm_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'otmdef')
async def cancel_action(callback_query: types.CallbackQuery):
    await callback_query.message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")