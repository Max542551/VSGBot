from aiogram import types
from aiogram.dispatcher import FSMContext
from database.add_to_db import save_sent_messages
from database.get_to_db import get_order_by_id, get_taxi
from handlers.default_handlers import start
from keyboards.inline.orders_inline.user_order_inline.accept_or_decline_price import accept_or_decline_price_keyboard
from loader import dp, bot
from states.order_states import ProposePriceState


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('order_propose_price'))
async def process_propose_price_callback(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split('_')[-1]
    state = dp.current_state(user=callback_query.from_user.id)
    taxi_id = callback_query.from_user.id
    taxi = await get_taxi(taxi_id)
    if taxi:
        if taxi.balance < 10:
            await bot.answer_callback_query(callback_query.id, show_alert=True,
                                            text="‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –º–µ–Ω—é")
            return

    await state.set_state(ProposePriceState.price)
    await state.update_data(order_id=order_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É"
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id)

    await bot.send_message(callback_query.from_user.id, 'üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:')


@dp.message_handler(state=ProposePriceState.price, content_types=types.ContentType.TEXT)
async def process_propose_price(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start.start(message, state)
        return

    try:
        price = int(message.text)

        taxi_id = message.from_user.id
        async with state.proxy() as data:
            order_id = data['order_id']
        order = get_order_by_id(order_id)
        taxi = await get_taxi(taxi_id)

        if taxi is None:
            await bot.send_message(taxi_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await bot.send_message(message.from_user.id, f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã {price} —Ä—É–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
        message = await bot.send_message(order.user_id,
                                         f'üîî –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –Ω–∞ <b>{taxi.color_car}</b> <b>{taxi.car}</b> c —Ä–µ–π—Ç–∏–Ω–≥–æ–º {round(taxi.rating, 2)} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ü–µ–Ω—É <b>{price}</b> —Ä—É–± –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑',
                                         reply_markup=accept_or_decline_price_keyboard(order, taxi_id, price),
                                         parse_mode='html')


    # Save sent message
        save_sent_messages(order.id, [(order.user_id, message.message_id)])
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

    await state.finish()
