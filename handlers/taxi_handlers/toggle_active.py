from datetime import datetime

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config_data.config import group_id
from database.get_to_db import get_taxi
from handlers.taxi_handlers import main_menu_taxi
from loader import dp, bot


@dp.callback_query_handler(lambda c: c.data == 'change_shift')
async def process_toggle_active_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    taxi = await get_taxi(user_id)

    if taxi:
        if taxi.admin_deactivated:
            await bot.answer_callback_query(callback_query.id, show_alert=True,
                                            text="üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            return

        if taxi.is_watching:
            await bot.answer_callback_query(callback_query.id, show_alert=True,
                                            text="‚ö†Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã, –≤—ã–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è!\n\n")
            return

        if taxi.shift:
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='end_shift'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data='secline_end_shift')
            )
            await bot.edit_message_text(text="‚ùóÔ∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?",
                                        chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id, reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='start_shift'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data='secline_start_shift')
            )
            await bot.edit_message_text(text="‚ùóÔ∏è–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å? –ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 30 —Ä—É–±.",
                                        chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=markup)
    else:
        await bot.answer_callback_query(callback_query.id, "‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–º.")


# –§—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
async def process_start_shift_confirmation(callback_query: types.CallbackQuery):
    # await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    taxi = await get_taxi(user_id)
    commission = 30

    if taxi.balance <= 0 or taxi.balance < commission:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã!\n\n")
        return

    if taxi:
        taxi.balance -= commission
        taxi.shift = True
        taxi.shift_start_time = datetime.now()
        taxi.save()
        # –∫–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—ã —Å –±–∞–ª–∞–Ω—Å–∞
        await bot.edit_message_text(text="üëç –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞", chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id)
        await bot.send_message(group_id, f'‚ùó<b>{taxi.name} {taxi.car} {taxi.registration_number}</b> –Ω–∞—á–∞–ª —Å–º–µ–Ω—É. –ë–∞–ª–∞–Ω—Å - <b>{taxi.balance}</b> —Ä—É–±', parse_mode='html')

        await main_menu_taxi.main_menu_taxi(callback_query.message)


async def process_end_shift_confirmation(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    taxi = await get_taxi(user_id)
    if taxi:
        taxi.shift_count = 0
        taxi.shift = False
        taxi.shift_start_time = None
        taxi.save()
        await bot.edit_message_text(text="üëç –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id)
        await bot.send_message(group_id, f'‚ùó<b>{taxi.name} {taxi.car} {taxi.registration_number}</b> –∑–∞–≤–µ—Ä–∏—à–ª —Å–º–µ–Ω—É. –ë–∞–ª–∞–Ω—Å - <b>{taxi.balance}</b> —Ä—É–±', parse_mode='html')

        await main_menu_taxi.main_menu_taxi(callback_query.message)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã
@dp.callback_query_handler(lambda c: c.data == 'start_shift')
async def confirm_start_shift(callback_query: types.CallbackQuery):
    await process_start_shift_confirmation(callback_query)


@dp.callback_query_handler(lambda c: c.data == 'end_shift')
async def confirm_end_shift(callback_query: types.CallbackQuery):
    await process_end_shift_confirmation(callback_query)


@dp.callback_query_handler(lambda c: c.data == 'secline_end_shift')
async def confirm_start_shift(callback_query: types.CallbackQuery):
    await bot.edit_message_text(text="üï∞Ô∏è –ï—â–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º", chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id)
    await main_menu_taxi.main_menu_taxi(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == 'secline_start_shift')
async def confirm_end_shift(callback_query: types.CallbackQuery):
    await bot.edit_message_text(text="üï∞Ô∏è –ï—â–µ –æ—Ç–¥—ã—Ö–∞–µ–º", chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id)
    await main_menu_taxi.main_menu_taxi(callback_query.message)

# @dp.callback_query_handler()

