import time
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

from database.add_to_db import create_delivery_in_db
from database.get_to_db import get_delivery_by_user_id, get_free_deliveries_count
from keyboards.inline.delivery_inline.cancel_buttons import delivery_cancel_order_buttons
from keyboards.inline.orders_inline.user_order_inline.cancel_order import cancel_order_buttons
from loader import dp, bot

from states.delivery_states import DeliveryState
from handlers.default_handlers.start import start
from keyboards.inline.orders_inline.user_order_inline.payment_method import payment_keyboard
from keyboards.inline.orders_inline.user_order_inline.cost import cost_keyboard
from keyboards.inline.orders_inline.user_order_inline.comment import comment_keyboard
from keyboards.reply.reply_menu_user import get_main_menu_keyboard
from utils import message_for_deliveryman

@dp.callback_query_handler(lambda call: call.data == 'user_delivery_order', state="*")
async def order_request(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(user_id=call.from_user.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.insert(InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="delivery_confirm"))
    keyboard.insert(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delivery_cancel"))

    count_deliveries = get_free_deliveries_count()
    message_text = f"<b>–í–ê–® –ó–ê–ö–ê–ó –ü–û–õ–£–ß–ê–¢ {count_deliveries} –í–û–î–ò–¢–ï–õ–ï–ô</b>\n\n" \

    await call.message.answer(
        f"<b>–í–ê–® –ó–ê–ö–ê–ó –ü–û–õ–£–ß–ê–¢ {count_deliveries} –í–û–î–ò–¢–ï–õ–ï–ô</b>\n\n‚ö†Ô∏è –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –µ–≥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —è–≤–ª—è–µ—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –í—ã –∫–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä –∏ –≤–æ–¥–∏—Ç–µ–ª—å.",
        reply_markup=keyboard, parse_mode='html')
    
@dp.callback_query_handler(lambda call: call.data == 'delivery_confirm', state="*")
async def confirm_order(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="üìç –û—Ç–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å, –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ?\n\nüîÖ <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤—Ä–µ–º—è (–≥.–ú–µ–ª–µ–Ω–∫–∏ —É–ª. –ú–∏—Ä–∞ –¥.1 –ø–æ–¥—ä–µ–∑–¥ 2   01.01.2024 –≤ 10.30):</b>",
                                parse_mode='html')
    await DeliveryState.FIRST_LOCATION.set()


@dp.callback_query_handler(lambda call: call.data == 'delivery_cancel', state="*")
async def cancel_order(call: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id, text="‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
    
@dp.message_handler(state=DeliveryState.FIRST_LOCATION)
async def handle_first_location(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["first_address"] = message.text
    await state.set_data(state_data)

    await bot.send_message(message.chat.id,
                           "‚õ≥Ô∏è –ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?",
                           parse_mode='html')

    await DeliveryState.SECOND_LOCATION.set()

# @dp.message_handler(state=DeliveryState.SECOND_LOCATION)
# async def handle_second_location(message: types.Message, state: FSMContext):
#     if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
#         await start(message, state)
#         return

#     state_data = await state.get_data()
#     state_data["second_address"] = message.text
#     await state.set_data(state_data)
#     await bot.send_message(message.chat.id, "üóì –ö–æ–≥–¥–∞ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?")
#     await DeliveryState.DELIVERY_DATE.set()

@dp.message_handler(state=DeliveryState.SECOND_LOCATION)
async def handle_second_location(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["second_address"] = message.text
    await state.set_data(state_data)
    await bot.send_message(message.chat.id, "üì¶ –ß—Ç–æ –≤ –ø–æ—Å—ã–ª–∫–µ?")
    await DeliveryState.PACKAGE_CONTENT.set()

@dp.message_handler(state=DeliveryState.PACKAGE_CONTENT)
async def handle_cost(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.insert(InlineKeyboardButton("‚úÖ –ü–æ—Å—ã–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞", callback_data="delivery_paid"))
    keyboard.insert(InlineKeyboardButton("–ü–æ—Å—ã–ª–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="delivery_unpaid"))

    state_data = await state.get_data()
    state_data["package_content"] = message.text
    await state.set_data(state_data)
    await bot.send_message(message.chat.id, "–û–ø–ª–∞—Ç–∞ –ø–æ—Å—ã–ª–∫–∏", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == 'delivery_paid', state="*")
async def paid_delivery(call: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    state_data["package_payment"] = "–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª"
    await state.set_data(state_data)

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–°–ø–æ—Å–æ–± –æ–ª–ø–∞—Ç—ã",
                                parse_mode='html',
                                reply_markup=payment_keyboard())
    await DeliveryState.PAYMENT_METHOD.set()

@dp.callback_query_handler(lambda call: call.data == 'delivery_unpaid', state="*")
async def unpaid_delivery(call: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    state_data["package_payment"] = "–ù—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é"
    await state.set_data(state_data)

    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id, text="–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å?")
    await DeliveryState.HOW_MUCH_PAY.set()

@dp.message_handler(state=DeliveryState.HOW_MUCH_PAY)
async def handle_amount_pay(message: types.CallbackQuery, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["package_price"] = message.text
    await state.set_data(state_data)
    await bot.send_message(message.chat.id, "–°–ø–æ—Å–æ–± –æ–ª–ø–∞—Ç—ã", reply_markup=payment_keyboard())
    await DeliveryState.PAYMENT_METHOD.set()

@dp.callback_query_handler(state=DeliveryState.PAYMENT_METHOD, text=["–ù–∞–ª–∏—á–Ω—ã–µ", "–ü–µ—Ä–µ–≤–æ–¥"])
async def handle_payment(call: types.CallbackQuery, state: FSMContext):
    if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(call.message, state)
        return

    state_data = await state.get_data()
    state_data["payment_method"] = call.data
    state_data["cost"] = None
    await state.set_data(state_data)

    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.send_message(call.message.chat.id,
                            "‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
                            reply_markup=comment_keyboard())
    await DeliveryState.COMMENT.set()

# @dp.callback_query_handler(state=DeliveryState.COST, text=["specify_amount", "request_offers"])
# async def handle_cost(call: types.CallbackQuery, state: FSMContext):
#     if call.message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
#         await start(call.message, state)
#         return

#     state_data = await state.get_data()
#     if call.data == "specify_amount":
#         await bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!):",
#                                     chat_id=call.message.chat.id,
#                                     message_id=call.message.message_id)
#         await DeliveryState.SPECIFY_AMOUNT.set()
#     else:
#         state_data["cost"] = None
#         await state.set_data(state_data)

#         await bot.delete_message(call.message.chat.id, call.message.message_id)
#         await bot.send_message(call.message.chat.id,
#                                 "‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
#                                 reply_markup=comment_keyboard())
#         await DeliveryState.COMMENT.set()

# @dp.message_handler(state=DeliveryState.SPECIFY_AMOUNT, content_types=['text'])
# async def handle_specify_amount(message: types.Message, state: FSMContext):
#     if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
#         await start(message, state)
#         return

#     state_data = await state.get_data()
#     try:
#         amount = int(message.text)
#         state_data["cost"] = amount
#         await state.set_data(state_data)

#         await bot.send_message(message.chat.id,
#                                 "‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
#                                 reply_markup=comment_keyboard())

#         await DeliveryState.COMMENT.set()
#     except ValueError:
#         await bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")


@dp.message_handler(state=DeliveryState.COMMENT)
async def handle_comment(message: types.Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["comment"] = message.text if message.text != "‚õîÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" else "-"
    first_address = state_data["first_address"]
    second_address = state_data["second_address"]

    await state.set_data(state_data)

    # —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
    create_delivery_in_db(state_data)
    user_id = message.chat.id
    order = get_delivery_by_user_id(user_id)
    cancel_order = delivery_cancel_order_buttons(order.id)

    if order: 
        message_text = f"‚ö†Ô∏è–ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –µ–≥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n" \
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤.\n\n" \
            f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —è–≤–ª—è–µ—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –í—ã –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫ –∏ –≤–æ–¥–∏—Ç–µ–ª—å."
        await bot.send_message(message.chat.id, message_text,
                               reply_markup=get_main_menu_keyboard(), parse_mode="html")
        time.sleep(2)
        await message.answer("üëÄ –ò—â—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞ ", reply_markup=cancel_order)

        await message_for_deliveryman.notify_delivery_drivers(order, first_address, second_address)

        await state.finish()  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    else:
        await bot.send_message(message.chat.id,
                               "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=get_main_menu_keyboard())