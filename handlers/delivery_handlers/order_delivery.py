from ast import Del
import asyncio
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import save_sent_delivery_messages
from database.delite_from_db import delivery_delete_sent_messages
from database.get_to_db import delivery_get_sent_messages, get_delivery_by_id, get_taxi, get_user
from handlers.taxi_handlers import main_menu_taxi
from keyboards.inline.delivery_inline.cancel_buttons import delivery_cancel_order_buttons
from keyboards.inline.delivery_inline.reply_accept_the_delivery import delivery_acceptance_keyboard_without_propose_price
from keyboards.reply import reply_menu_user
from loader import dp, bot
from states.delivery_states import DeliveryStatus
from aiogram.dispatcher import FSMContext


@dp.callback_query_handler(lambda c: 'delivery_order_acceptance' in c.data)
async def process_order_defer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    order_id = int(callback_query.data.split('_')[-1])
    taxi_id = callback_query.from_user.id
    taxi = await get_taxi(taxi_id)
    order = get_delivery_by_id(order_id)
    print(order_id)
    print(order.busy_by)

    if order.busy_by:
        # await bot.edit_message_text(text="‚õîÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º",
        #                             chat_id=callback_query.message.chat.id,
        #                             message_id=callback_query.message.message_id)
        return

    # order.status = DeliveryStatus.ACCEPTED
    order.busy_by = taxi_id
    order.save()
    await bot.edit_message_text(text="‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n"
                                     "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(order.user_id,
                           f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                           f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –¥–æ—Å—Ç–∞–≤–∫–µ",
                           parse_mode='html')

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    sent_messages = delivery_get_sent_messages(order_id)
    for user_id, message_id in sent_messages:
        if user_id != taxi_id:
            await bot.delete_message(chat_id=user_id, message_id=message_id)

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∞–∫—Å–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    try:
        save_sent_delivery_messages(order_id, [(taxi_id, message_id)])
    except UnboundLocalError:
        pass

@dp.callback_query_handler(lambda c: c.data.startswith('user_delivery_orders'), state="*")
async def process_delivery_order_for_user(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    order_id = int(callback_query.data.split('_')[3])
    order = get_delivery_by_id(order_id)
    if order.status == DeliveryStatus.CANCELED or order.status == DeliveryStatus.COMPLETED:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ó–∞–∫–∞–∑ –±—ã–ª —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ª–∏–±–æ –æ—Ç–º–µ–Ω–µ–Ω\n\n")
        return

    taxi = await get_taxi(order.busy_by)
    cost = "–ñ–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" if order.cost is None else f"{order.cost} —Ä—É–±"
    package_price = f"üí∞ <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ—Å—ã–ª–∫–∞:</b> {order.package_price}\n\n" if order.package_price else ""
    message_text = f"‚ùóÔ∏è<b>–î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n\n" \
                   f"üë® <b>–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è:</b> {taxi.name if taxi else '–≤ –ø–æ–∏—Å–∫–µ'}\n\n" \
                   f"üìà <b>–†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è:</b> {taxi.rating if taxi else '–≤ –ø–æ–∏—Å–∫–µ'}\n\n" \
                   f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è:</b> {taxi.phone if taxi else '–≤ –ø–æ–∏—Å–∫–µ'}\n\n\n" \
                   f"üÖ∞Ô∏è <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {order.first_address}\n\n" \
                   f"üÖ±Ô∏è <b>–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.second_address}\n\n\n" \
                   f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost}\n\n" \
                   f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n" \
                   f"üì¶ <b>–û–ø–ª–∞—Ç–∞ –ø–æ—Å—ã–ª–∫–∏:</b> {order.package_payment}\n\n" \
                   f"{package_price}" \
                   f"üíç <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏</b> {order.package_content}\n\n" \
                   f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <b>{order.comment}</b>"

    await bot.send_message(callback_query.from_user.id, text=message_text, reply_markup=delivery_cancel_order_buttons(order_id),
                           parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('delivery_order'))
async def process_delivery_order(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    order_id = int(callback_query.data.split('_')[-1])

    order = get_delivery_by_id(order_id)

    if order.status == DeliveryStatus.CANCELED or order.status == DeliveryStatus.COMPLETED:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ó–∞–∫–∞–∑ –±—ã–ª —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ª–∏–±–æ –æ—Ç–º–µ–Ω–µ–Ω\n\n")

        return

    user = await get_user(order.user_id)
    cost = order.cost
    
    package_price = f"üí∞ <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –ø–æ—Å—ã–ª–∫–∞:</b> {order.package_price}\n\n" if order.package_price else ""
    message_text = f"‚ùóÔ∏è<b>–î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n\n" \
                   f"üÖ∞Ô∏è <b>–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {order.first_address}\n\n" \
                   f"üÖ±Ô∏è <b>–ê–¥—Ä–µ—Å –ø—Ä–∏–±—ã—Ç–∏—è:</b> {order.second_address}\n\n\n" \
                   f"üôã‚Äç‚ôÇÔ∏è <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {user.name}\n\n" \
                   f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b> {user.phone}\n\n\n" \
                   f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost}\n\n" \
                   f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n" \
                   f"üì¶ <b>–û–ø–ª–∞—Ç–∞ –ø–æ—Å—ã–ª–∫–∏:</b> {order.package_payment}\n\n" \
                   f"{package_price}" \
                   f"üíç <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏</b> {order.package_content}\n\n" \
                   f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <b>{order.comment}</b>"

    await bot.send_message(callback_query.from_user.id, text=message_text,
                           reply_markup=delivery_acceptance_keyboard_without_propose_price(order), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('delivery_start_order_confirmation'), state="*")
async def start_order_confirmation(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[-1])
    confirm_keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–µ–∑–¥', callback_data=f'delivery_departure_acceptance_{order_id}'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'otmdef')
    )
    await callback_query.message.answer(
        "‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏? –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≤—ã –≤—ã–µ—Ö–∞–ª–∏.",
        reply_markup=confirm_keyboard)

@dp.callback_query_handler(lambda c: 'delivery_departure_acceptance' in c.data, state="*")
async def process_delivery_acceptance(callback_query: types.CallbackQuery, state: FSMContext):
    print("cstta")
    order_id = int(callback_query.data.split("_")[-1])
    taxi_id = callback_query.from_user.id
    taxi = await get_taxi(taxi_id)
    order = get_delivery_by_id(order_id)

    if order is None:
        await bot.send_message(taxi_id, "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
        return

    if taxi.is_busy:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑.\n\n")
        return

    if order.taxi_id is not None:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="ü§∑‚Äç‚ôÇÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º —Ç–∞–∫—Å–∏—Å—Ç–æ–º."
        )
        return

    await bot.send_message(
        chat_id=order.user_id,
        text=f"ü•≥ –î–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n"
                "üöï –î–æ—Å—Ç–∞–≤—â–∏–∫ –≤—ã–µ—Ö–∞–ª\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        reply_markup=reply_menu_user.get_main_menu_keyboard(), parse_mode='html')

    if order.status == DeliveryStatus.CANCELED or order.status == DeliveryStatus.COMPLETED:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="‚õîÔ∏è –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
        )
        return


    if taxi.balance <= 0:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!\n\n")
        return

    order.taxi_id = taxi_id
    order.status = DeliveryStatus.ACCEPTED
    order.save()

    taxi.shift_count += 1
    taxi.is_busy = True
    taxi.save()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤
    sent_messages = delivery_get_sent_messages(order.id)
    for user_id, message_id in sent_messages:
        if user_id != taxi_id:
            try:
                await bot.delete_message(chat_id=user_id, message_id=message_id)
                await asyncio.sleep(0.2)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞) {user_id}: {e}")

    delivery_delete_sent_messages(order.id)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!")

    await main_menu_taxi.main_menu_taxi(callback_query.message)

    await state.finish()
    await bot.answer_callback_query(callback_query.id)



@dp.callback_query_handler(lambda c: c.data.startswith('delivery_reject_order_confirmation'), state="*")
async def reject_order_confirmation(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[-1])
    confirm_keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫–∞–∑', callback_data=f'cancel_delivery_{order_id}'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='otmdef')
    )
    await callback_query.message.answer(
        "‚ö†Ô∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞? –í—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ —Ç–µ–ª., —á—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å? –ü—Ä–∏ –∂–∞–ª–æ–±–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
        reply_markup=confirm_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'otmdef')
async def cancel_action(callback_query: types.CallbackQuery):
    await callback_query.message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")