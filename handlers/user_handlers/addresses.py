from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database.get_to_db import get_user
from database.update_to_db import update_user_address
from loader import dp, bot
from states.user_states import UserAddressChange


@dp.callback_query_handler(lambda c: c.data == 'my_addresses')
async def my_addresses(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    home_address = user.home_address if user.home_address else "–ù–µ —É–∫–∞–∑–∞–Ω"
    work_address = user.work_address if user.work_address else "–ù–µ —É–∫–∞–∑–∞–Ω"

    reply_markup = InlineKeyboardMarkup(row_width=1)
    reply_markup.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –î–æ–º", callback_data='add_home'),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –†–∞–±–æ—Ç–∞", callback_data='add_work')
    )

    await bot.send_message(callback_query.from_user.id,
                           "üëá–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∞–¥—Ä–µ—Å–∞:\n\n"
                           f"üè† –î–æ–º: {home_address}\n"
                           f"üíº –†–∞–±–æ—Ç–∞: {work_address}",
                           reply_markup=reply_markup)


@dp.callback_query_handler(lambda c: c.data == 'add_home', state="*")
async def prompt_home_address(callback_query: types.CallbackQuery):
    await UserAddressChange.waiting_for_home_address.set()
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å:")

@dp.message_handler(state=UserAddressChange.waiting_for_home_address)
async def update_home_address(message: types.Message, state: FSMContext):
    home_address = message.text
    user_id = message.from_user.id
    update_user_address(user_id, home_address=home_address)
    await message.answer("‚úÖ –í–∞—à –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.reset_state()


@dp.callback_query_handler(lambda c: c.data == 'add_work', state="*")
async def prompt_work_address(callback_query: types.CallbackQuery):
    await UserAddressChange.waiting_for_work_address.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–±–æ—á–µ–≥–æ –∞–¥—Ä–µ—Å–∞
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å:")


@dp.message_handler(state=UserAddressChange.waiting_for_work_address)
async def update_work_address(message: types.Message, state: FSMContext):
    work_address = message.text
    user_id = message.from_user.id
    update_user_address(user_id, work_address=work_address)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await message.answer("‚úÖ –í–∞—à —Ä–∞–±–æ—á–∏–π –∞–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
