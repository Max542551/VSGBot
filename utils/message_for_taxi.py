from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import save_sent_messages
from database.database import Taxi
from database.delite_from_db import remove_taxi
from database.get_to_db import get_all_taxis, get_all_taxis_with_child_seat, get_user, get_blocked_users_for_taxi, get_blocked_taxis_for_user
from keyboards.inline.orders_inline.time_key import get_time_keyboard
from keyboards.inline.taxi_inline.reply_accept_the_order import order_acceptance_keyboard, order_acceptance_keyboard_def
from loader import bot, dp


async def notify_taxi_drivers(order, first_address, second_address):
    user = await get_user(order.user_id)
    cost = "–ñ–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" if order.cost is None else f"{order.cost} —Ä—É–±"
    rating_pass = round(user.rating, 2) if user.rating else "–ï—â–µ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
    message_text = f"‚ùóÔ∏è<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>‚ùóÔ∏è #{order.id}\n\n\n" \
                   f"üôã‚Äç‚ôÇÔ∏è <b>–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {user.name}\n\n" \
                   f"üë•Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {order.count_passanger}\n\n" \
                   f"üìà <b>–†–µ–π—Ç–∏–Ω–≥ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {rating_pass}\n\n" \
                   f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b> {'+' + user.phone}\n\n\n" \
                   f"üü¢Ô∏è <b>–û—Ç–∫—É–¥–∞:</b> {first_address}\n\n" \
                   f"üî¥ <b>–ö—É–¥–∞:</b> {second_address}\n\n" \
                   f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost}\n\n" \
                   f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n" \
                   f"üë∂ <b>–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ:</b> {order.child_seat}\n\n\n" \
                   f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <b>{order.comment}</b>"

    child_seat_needed = order.child_seat == "–ù—É–∂–Ω—ã"
    taxis = Taxi.select().where(Taxi.child_seat == child_seat_needed) if child_seat_needed else Taxi.select()
    sent_messages = []

    if order.cost is None:
        accept_keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton('üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É', callback_data=f'order_propose_price_{order.id}')
        )
    else:
        accept_keyboard = order_acceptance_keyboard(order)

    blocked_taxis = get_blocked_taxis_for_user(order.user_id)

    for taxi in taxis:
        if taxi.user_id in blocked_taxis:
            continue

        blocked_users = get_blocked_users_for_taxi(taxi.user_id)

        if order.user_id in blocked_users:
            continue

        if taxi.is_active and taxi.shift and not taxi.admin_deactivated:
            if taxi.is_busy:
                try:
                    time_keyboard = await get_time_keyboard(order.id)
                    message = await bot.send_message(chat_id=taxi.user_id, text=message_text,
                                               reply_markup=time_keyboard,
                                               parse_mode='html')
                    sent_messages.append((taxi.user_id, message.message_id))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫—Å–∏—Å—Ç—É {taxi.user_id}: {e}")
            else:
                try:
                    message = await bot.send_message(chat_id=taxi.user_id, text=message_text,
                                               reply_markup=accept_keyboard,
                                               parse_mode='html')
                    sent_messages.append((taxi.user_id, message.message_id))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫—Å–∏—Å—Ç—É {taxi.user_id}: {e}")

                    if "Forbidden: bot was blocked by the user" in str(e):
                        success = remove_taxi(taxi.user_id)
                        if success:
                            print(f"‚úÖ –¢–∞–∫—Å–∏—Å—Ç —Å ID {taxi.user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        elif taxi.is_watching:
            try:
                await bot.send_message(chat_id=taxi.user_id, text=f'‚ùóÔ∏è<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> #{order.id}',
                                 parse_mode='html')
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫—Å–∏—Å—Ç—É {taxi.user_id}: {e}")

                if "Forbidden: bot was blocked by the user" in str(e):
                    success = remove_taxi(taxi.user_id)
                    if success:
                        print(f"‚úÖ –¢–∞–∫—Å–∏—Å—Ç —Å ID {taxi.user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    save_sent_messages(order.id, sent_messages)



from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import save_sent_messages
from database.delite_from_db import remove_taxi
from database.get_to_db import get_all_taxis, get_all_taxis_with_child_seat, get_user
from keyboards.inline.taxi_inline.reply_accept_the_order import order_acceptance_keyboard
from loader import bot


async def notify_taxi_drivers_deffer(order, first_address, second_address):
    user = await get_user(order.user_id)
    cost = "–ñ–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" if order.cost is None else f"{order.cost} —Ä—É–±"
    rating_pass = round(user.rating, 2) if user.rating else "–ï—â–µ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
    message_text = f"‚ùó‚ùóÔ∏è<b>–ü–†–ï–î–ó–ê–ö–ê–ó</b> ‚ùó‚ùó#{order.id}\n\n\n" \
                   f"üë•Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {order.count_passanger}\n\n" \
                   f"üôã‚Äç‚ôÇÔ∏è <b>–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞:</b> {user.name}\n\n" \
                   f"üìà <b>–†–µ–π—Ç–∏–Ω–≥ –ø–∞—Å—Å–∞–∂–∏—Ä–∞</b> {rating_pass}\n\n" \
                   f"üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:</b> {'+' + user.phone}\n\n\n" \
                   f"üü¢Ô∏è <b>–û—Ç–∫—É–¥–∞:</b> {first_address}\n\n" \
                   f"üî¥ <b>–ö—É–¥–∞:</b> {second_address}\n\n" \
                   f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {cost}\n\n" \
                   f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}\n\n" \
                   f"üë∂ <b>–î–µ—Ç—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ:</b> {order.child_seat}\n\n\n" \
                   f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: <b>{order.comment}</b>"

    child_seat_needed = order.child_seat == "–ù—É–∂–Ω—ã"
    taxis = Taxi.select().where(Taxi.child_seat == child_seat_needed) if child_seat_needed else Taxi.select()
    sent_messages = []

    if order.cost is None:
        accept_keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton('üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É', callback_data=f'order_propose_price_{order.id}')
        )
    else:
        accept_keyboard = order_acceptance_keyboard_def(order)

    blocked_taxis = get_blocked_taxis_for_user(order.user_id)

    for taxi in taxis:
        if taxi.user_id in blocked_taxis:
            continue

        blocked_users = get_blocked_users_for_taxi(taxi.user_id)

        if order.user_id in blocked_users:
            continue

        if taxi.is_active and not taxi.admin_deactivated:
            if taxi.is_busy:
                try:
                    time_keyboard = await get_time_keyboard(order.id)
                    message = await bot.send_message(chat_id=taxi.user_id, text=message_text,
                                                     reply_markup=time_keyboard,
                                                     parse_mode='html')
                    sent_messages.append((taxi.user_id, message.message_id))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫—Å–∏—Å—Ç—É {taxi.user_id}: {e}")
            else:
                try:
                    message = await bot.send_message(chat_id=taxi.user_id, text=message_text,
                                                     reply_markup=accept_keyboard,
                                                     parse_mode='html')
                    sent_messages.append((taxi.user_id, message.message_id))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫—Å–∏—Å—Ç—É {taxi.user_id}: {e}")

                    if "Forbidden: bot was blocked by the user" in str(e):
                        success = remove_taxi(taxi.user_id)
                        if success:
                            print(f"‚úÖ –¢–∞–∫—Å–∏—Å—Ç —Å ID {taxi.user_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    save_sent_messages(order.id, sent_messages)


@dp.callback_query_handler(lambda c: c.data.startswith('donfirm_order_defer_'))
async def confirm_order_defer(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split('_')[3])
    confirm_keyboard = InlineKeyboardMarkup()
    confirm_keyboard.add(InlineKeyboardButton('–ü–†–û–î–û–õ–ñ–ò–¢–¨', callback_data=f'dorder_defer_{order_id}'))
    confirm_keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='defancel'))
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="–í–ù–ò–ú–ê–ù–ò–ï!!!! –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ü–†–ï–î–ó–ê–ö–ê–ó, –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏ –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è?",
                                reply_markup=confirm_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'defancel')
async def cancel_order_defer(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞.")
