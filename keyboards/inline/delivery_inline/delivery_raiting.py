import json
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config_data.config import group_id

from database.database import Delivery, Order, Taxi, User
from database.get_to_db import get_delivery_by_id, get_taxi, get_user
from keyboards.inline.orders_inline.user_order_inline import rating
from loader import dp, bot
from states.delivery_states import BanCustomerStates, BanDeliveryStates, DeliveryStatus
from states.order_states import OrderStatus

def delivery_get_rating_keyboard(order_id):
    keyboard = InlineKeyboardMarkup()

    rating_buttons = [
        InlineKeyboardButton(emoji, callback_data=f"deliveryrate_{order_id}_{rating}")
        for rating, emoji in zip(range(1, 6), ["1", "2", "3", "4", "5"])
    ]

    keyboard.row(*rating_buttons)
    block_driver_button = InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤—â–∏–∫–∞ üö´", callback_data=f"ban_delivery_{order_id}")
    keyboard.add(block_driver_button)

    return keyboard

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('delivery_rate'))
async def rate_order(callback_query: types.CallbackQuery):
    _, _, order_id, rating = callback_query.data.split("_", 3)
    order_id, rating = int(order_id), int(rating)

    order = Delivery.get_by_id(order_id)
    order.rating = rating
    order.save()

    taxi = await get_taxi(order.taxi_id)
    orders = Order.select().where(Order.taxi_id == taxi.user_id, Order.status != OrderStatus.CANCELED)
    deliveries = Delivery.select().where(Delivery.taxi_id == taxi.user_id, Delivery.status != DeliveryStatus.CANCELED)
    rated_orders = [order for order in orders if order.rating is not None]
    rated_deliveries = [delivery for delivery in deliveries if delivery.rating is not None]
    if rated_orders or rated_deliveries:
        raiting_list = rated_orders.extend(rated_deliveries)
        total_rating = sum([order.rating for order in raiting_list])
        taxi.rating = round(total_rating / len(rated_orders), 2)
    else:
        taxi.rating = rating
    taxi.save()

    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(taxi.user_id, f"üìÑ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> –±—ã–ª –æ—Ü–µ–Ω–µ–Ω.\n\n"
                                         f"üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode='html')
    
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ban_delivery'))
async def process_ban_delivery_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.split('_')[-1]

    await state.update_data(order_id=order_id, user_id=callback_query.from_user.id)
    await BanDeliveryStates.waiting_for_reason.set()

    cancel_button = InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel_ban_process")
    markup = InlineKeyboardMarkup().add(cancel_button)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è: ",
                           reply_markup=markup)


@dp.message_handler(state=BanDeliveryStates.waiting_for_reason, content_types=types.ContentTypes.TEXT)
async def process_ban_driver_reason(message: types.Message, state: FSMContext):
    reason = message.text
    user_data = await state.get_data()
    order_id = user_data['order_id']
    user_id = user_data['user_id']
    order = get_delivery_by_id(order_id)
    user = await get_user(user_id)
    taxi = await get_taxi(order.taxi_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = Delivery.get(Delivery.id == order_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        blocked_taxis = json.loads(user.blocked_taxis)
        if order.taxi_id not in blocked_taxis:
            blocked_taxis.append(order.taxi_id)
            user.blocked_taxis = json.dumps(blocked_taxis)
            user.save()

        # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É
        await bot.send_message(user_id,
                               f"‚úÖ –î–æ—Å—Ç–∞–≤—â–∏–∫ {taxi.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

        await bot.send_message(group_id,
                               f"üö´ –ó–∞–∫–∞–∑—á–∏–∫ <b>{user.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–æ–¥–∏—Ç–µ–ª—è <b>{taxi.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.", parse_mode='html')

    except Delivery.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except User.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ø–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Taxi.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è.")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    
def delivery_rate_user_keyboard(user_id, order_id):
    keyboard = InlineKeyboardMarkup()

    rating_keyboards = [
        InlineKeyboardButton(emoji, callback_data=f"customer_rate_{user_id}_{rating}")
        for rating, emoji in zip(range(1, 6), ["1", "2", "3", "4", "5"])
    ]
    keyboard.row(*rating_keyboards)
    block_customer_button = InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞ üö´", callback_data=f"ban_customer_{order_id}")
    keyboard.add(block_customer_button)
    return keyboard

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("customer_rate"))
async def rate_customer(callback_query: types.CallbackQuery):
    _, _, user_id, rating = callback_query.data.split("_", 3)
    user_id, rating = int(user_id), int(rating)

    user = await get_user(user_id)
    if user.rating is None:
        user.rating = rating
    else:
        # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å –ª–æ–≥–∏–∫—É –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        user.rating = (user.rating + rating) / 2
    user.save()

    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞!", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('deliveryrate'))
async def rate_user(callback_query: types.CallbackQuery):
    _, order_id, rating = callback_query.data.split("_", 2)
    order_id, rating = int(order_id), int(rating)

    order = Delivery.get_by_id(order_id)
    order.rating = rating
    order.save()

    taxi = await get_taxi(order.taxi_id)
    orders = Delivery.select().where(Delivery.taxi_id == taxi.user_id, Delivery.status != DeliveryStatus.CANCELED)
    rated_orders = [order for order in orders if order.rating is not None]
    if rated_orders:
        total_rating = sum([order.rating for order in rated_orders])
        taxi.rating = round(total_rating / len(rated_orders), 2)
    else:
        taxi.rating = rating
    taxi.save()

    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(taxi.user_id, f"üìÑ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> –±—ã–ª –æ—Ü–µ–Ω–µ–Ω.\n\n"
                                         f"üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode='html')

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ban_customer'))
async def process_ban_customer_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.split('_')[-1]

    await state.update_data(order_id=order_id, taxi_id=callback_query.from_user.id)
    await BanCustomerStates.waiting_for_reason.set()

    cancel_button = InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel_ban_process")
    markup = InlineKeyboardMarkup().add(cancel_button)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞: ",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'cancel_ban_process', state=BanCustomerStates.waiting_for_reason)
async def process_cancel_ban(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data['order_id']

    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"üëå –ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")

    await state.finish()

@dp.message_handler(state=BanCustomerStates.waiting_for_reason, content_types=types.ContentTypes.TEXT)
async def process_ban_reason(message: types.Message, state: FSMContext):
    reason = message.text
    user_data = await state.get_data()
    order_id = user_data['order_id']
    taxi_id = user_data['taxi_id']
    order = get_delivery_by_id(order_id)
    user = await get_user(order.user_id)
    taxi = await get_taxi(taxi_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = Delivery.get(Delivery.id == order_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–∞–Ω–µ
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫—Å–∏—Å—Ç–∞
        blocked_users = json.loads(taxi.blocked_users)
        if order.user_id not in blocked_users:
            blocked_users.append(order.user_id)
            taxi.blocked_users = json.dumps(blocked_users)
            taxi.save()

        if order.status != "COMPLETED":
            taxi.is_busy = False
            taxi.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
            await bot.send_message(taxi_id,
                                   f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ {user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.")

            await bot.send_message(group_id,
                                   f"üö´ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–∫–∞–∑—á–∏–∫–∞ <b>{user.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.",
                                   parse_mode='html')

            await bot.send_message(order.user_id, f"üòí –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'canceled'
            order.status = DeliveryStatus.CANCELED
            order.save()
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
            await bot.send_message(taxi_id,
                                   f"‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ {user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

            await bot.send_message(group_id,
                                   f"üö´ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–∫–∞–∑—á–∏–∫–∞ <b>{user.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.",
                                   parse_mode='html')

    # except DoesNotExist:
    #     await bot.send_message(taxi_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–∞–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {e}")
        await bot.send_message(taxi_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.")

    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()