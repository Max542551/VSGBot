import json

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config_data.config import group_id
from database.database import Delivery, Order, User, Taxi
from database.get_to_db import get_taxi, get_user, get_order_by_id
from loader import bot, dp
from states.delivery_states import DeliveryStatus
from states.order_states import OrderStatus
from states.taxi_states import BanDriverStates


def get_rating_keyboard(order_id):
    keyboard = InlineKeyboardMarkup()

    rating_buttons = [
        InlineKeyboardButton(emoji, callback_data=f"rate_{order_id}_{rating}")
        for rating, emoji in zip(range(1, 6), ["1", "2", "3", "4", "5"])
    ]

    keyboard.row(*rating_buttons)
    block_driver_button = InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è üö´", callback_data=f"ban_driver_{order_id}")
    keyboard.add(block_driver_button)

    return keyboard


def get_user_rating_keyboard(user_id, order_id):
    keyboard = InlineKeyboardMarkup()

    rating_buttons = [
        InlineKeyboardButton(emoji, callback_data=f"userrate_{user_id}_{rating}")
        for rating, emoji in zip(range(1, 6), ["1", "2", "3", "4", "5"])
    ]

    keyboard.row(*rating_buttons)
    ban_button = InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üö´", callback_data=f"ban_passenger_{order_id}")
    keyboard.add(ban_button)

    return keyboard


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('rate'))
async def rate_order(callback_query: types.CallbackQuery):
    _, order_id, rating = callback_query.data.split("_", 2)
    order_id, rating = int(order_id), int(rating)

    order = Order.get_by_id(order_id)
    order.rating = rating
    order.save()

    taxi = await get_taxi(order.taxi_id)
    orders = Order.select().where(Order.taxi_id == taxi.user_id, Order.status != OrderStatus.CANCELED)
    deliveries = Delivery.select().where(Delivery.taxi_id == taxi.user_id, Delivery.status != DeliveryStatus.CANCELED)
    rated_orders = [order for order in orders if order.rating is not None]
    rated_deliveries = [delivery for delivery in deliveries if delivery.rating is not None]
    if rated_orders or rated_deliveries:
        raiting_list = rated_orders + rated_deliveries 
        total_rating = sum([order.rating for order in raiting_list])
        taxi.rating = round(total_rating / len(raiting_list), 2)
    else:
        taxi.rating = rating
    taxi.save()

    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    # await bot.send_message(taxi.user_id, f"üìÑ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> –±—ã–ª –æ—Ü–µ–Ω–µ–Ω.\n\n"
    #                                      f"üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!", parse_mode='html')


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('userrate'))
async def rate_user(callback_query: types.CallbackQuery):
    _, user_id, rating = callback_query.data.split("_", 2)
    user_id, rating = int(user_id), int(rating)

    user = await get_user(user_id)
    if user.rating is None:
        user.rating = rating
    else:
        # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å –ª–æ–≥–∏–∫—É –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        user.rating = (user.rating + rating) / 2
    user.save()

    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞!", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ban_driver_'))
async def process_ban_driver_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.split('_')[-1]

    await state.update_data(order_id=order_id, user_id=callback_query.from_user.id)
    await BanDriverStates.waiting_for_reason.set()

    cancel_button = InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel_ban_process")
    markup = InlineKeyboardMarkup().add(cancel_button)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è: ",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'cancel_ban_process', state=BanDriverStates.waiting_for_reason)
async def process_cancel_ban_driver(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data['order_id']

    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"üëå –ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.")

    await state.finish()


@dp.message_handler(state=BanDriverStates.waiting_for_reason, content_types=types.ContentTypes.TEXT)
async def process_ban_driver_reason(message: types.Message, state: FSMContext):
    reason = message.text
    user_data = await state.get_data()
    order_id = user_data['order_id']
    user_id = user_data['user_id']
    order = get_order_by_id(order_id)
    user = await get_user(user_id)
    taxi = await get_taxi(order.taxi_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = Order.get(Order.id == order_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        blocked_taxis = json.loads(user.blocked_taxis)
        if order.taxi_id not in blocked_taxis:
            blocked_taxis.append(order.taxi_id)
            user.blocked_taxis = json.dumps(blocked_taxis)
            user.save()

        # await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É
        await bot.send_message(user_id,
                               f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {taxi.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

        await bot.send_message(group_id,
                               f"üö´ –ü–∞—Å—Å–∞–∂–∏—Ä <b>{user.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–æ–¥–∏—Ç–µ–ª—è <b>{taxi.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.", parse_mode='html')

    except Order.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except User.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ø–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Taxi.DoesNotExist:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è.")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
