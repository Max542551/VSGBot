from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config_data.config import ADMIN_IDS
from database.delite_from_db import delete_sent_messages
from database.get_to_db import get_order_by_id, get_taxi, get_sent_messages, get_user, get_sent_item_by_order
from handlers.default_handlers import start
from handlers.taxi_handlers import main_menu_taxi
from loader import dp, bot
from states.order_states import OrderStatus


def cancel_order_buttons(order_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
    :param order_id: ID –∑–∞–∫–∞–∑–∞
    :return: InlineKeyboardMarkup
    """
    cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data=f"cancel_order_{order_id}")
    markup = InlineKeyboardMarkup(row_width=1).add(cancel_button)
    return markup


def get_special_cancel_button(order_id: int) -> InlineKeyboardMarkup:
    cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå", callback_data=f"special_cancel_order_{order_id}")
    markup = InlineKeyboardMarkup(row_width=1).add(cancel_button)
    return markup


def get_confirmation_markup(order_id):
    markup = InlineKeyboardMarkup(row_width=2)
    confirm_button = InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}")
    deny_button = InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"deny_cancel_{order_id}")
    markup.add(confirm_button, deny_button)
    return markup


async def determine_cancel_button(order) -> InlineKeyboardMarkup:
    if order.status in [OrderStatus.ACCEPTED, OrderStatus.EXPECTATION]:
        return get_special_cancel_button(order.id)
    else:
        return cancel_order_buttons(order.id)


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_order_'))
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    initiator_user_id = callback_query.from_user.id
    order_id = int(callback_query.data.split("_")[2])
    order = get_order_by_id(order_id)

    if order is None:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
        return

    if order.status in [OrderStatus.COMPLETED, OrderStatus.CANCELED]:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text="–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    if order.deferred:
        order.deferred = False
        deferred_by = order.deferred_by
        if deferred_by:
            await bot.send_message(deferred_by, f"üòí –ó–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
            await bot.send_message(order.user_id, f"üòí –ó–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

    order.status = OrderStatus.CANCELED
    order.save()

    taxi_id = order.taxi_id
    taxi = await get_taxi(taxi_id)

    user_id = order.user_id
    user = await get_user(user_id)

    if order.taxi_id is not None:
        if initiator_user_id not in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –Ω–µ –∞–¥–º–∏–Ω
            if user.rating is None:
                user.rating = 1.0  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            else:
                user.rating = (user.rating + 1.0) / 2
            user.save()

        # await bot.send_message(order.taxi_id, f"üòí –ó–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
        taxi.is_busy = False
        taxi.save()

    await bot.edit_message_text(text="üòî –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤
    sent_messages = get_sent_messages(order.id)
    for user_id, message_id in sent_messages:
        try:
            await bot.delete_message(chat_id=user_id, message_id=message_id)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    delete_sent_messages(order.id)

    sent_item = get_sent_item_by_order(order)
    if sent_item:
        await bot.delete_message(chat_id=taxi_id, message_id=sent_item.text_message_id)

    if callback_query.from_user.id in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω ")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∫—Ç–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ—Ç–º–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if initiator_user_id == int(order.user_id):  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º
        if order.taxi_id:
            await bot.send_message(order.taxi_id, f"üòí –ó–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º.")
            taxi.is_busy = False
            taxi.save()
    elif initiator_user_id == order.taxi_id:  # –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–∫—Å–∏—Å—Ç–æ–º
        if order.user_id:
            await bot.send_message(order.user_id, f"üòí –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ç–∞–∫—Å–∏—Å—Ç–æ–º.")

    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('passenger_no_show_'))
async def handle_passenger_no_show(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[-1])
    order = get_order_by_id(order_id)

    if order is None:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
        return

    confirm_markup = get_confirmation_markup(order_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text="‚ö†Ô∏è –í—ã –ø–æ–∑–≤–æ–Ω–∏–ª–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É? –ü–æ–µ–∑–¥–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ä–µ–π—Ç–∏–Ω–≥ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –±—É–¥–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                                reply_markup=confirm_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('deny_cancel_'))
async def handle_deny_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split("_")[-1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    order = get_order_by_id(order_id)

    if order is None:
        await bot.send_message(callback_query.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
        return

    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–µ–∑–¥–∫—É.")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.reset_state()

    await main_menu_taxi.main_menu_taxi(
        callback_query.message)  # –ó–∞–º–µ–Ω–∏—Ç–µ start.start –Ω–∞ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


@dp.callback_query_handler(lambda call: call.data.startswith('special_cancel_order_'))
async def special_cancel_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[-1])
    confirm_markup = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"pasdecline_cancel_{order_id}")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "üöïüí® –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤—ã–µ—Ö–∞–ª. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑? –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.",
        reply_markup=confirm_markup
    )
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda call: call.data.startswith('pasdecline_cancel_'))
async def decline_cancel_order(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text="‚úÖ–ó–∞–∫–∞–∑ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.")
    await bot.answer_callback_query(callback_query.id)
