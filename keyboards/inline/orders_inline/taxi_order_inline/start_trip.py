import json

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from peewee import DoesNotExist

from config_data.config import group_id
from database.database import Order
from database.get_to_db import get_order_by_id, get_taxi, get_user
from keyboards.inline.orders_inline.taxi_order_inline.end_trip import get_end_trip_button
from loader import bot, dp
from states.order_states import OrderStatus
from states.user_states import BanPassengerStates


def get_start_trip_button(order_id):
    markup = InlineKeyboardMarkup()
    start_trip_button = InlineKeyboardButton("üü¢ –ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É üü¢", callback_data=f"order_start_trip_{order_id}")
    cancel_button = InlineKeyboardButton("‚ùå –ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –≤—ã—à–µ–ª ‚ùå", callback_data=f"passenger_no_show_{order_id}")
    ban_button = InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞ üö´", callback_data=f"ban_passenger_{order_id}")
    markup.add(start_trip_button)
    markup.add(cancel_button)
    markup.add(ban_button)
    return markup


@dp.callback_query_handler(lambda c: c.data.startswith('order_start_trip_'))
async def process_start_trip(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = int(callback_query.data.split("_")[3])
    taxi_id = callback_query.from_user.id
    taxi = await get_taxi(taxi_id)

    order = get_order_by_id(order_id)
    if order is None:
        await bot.send_message(taxi_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
        return

    if order.taxi_id != taxi_id:
        await bot.send_message(taxi_id, "–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return

    if order.status == OrderStatus.CANCELED or order.status == OrderStatus.COMPLETED:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="‚õîÔ∏è –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
        )
        return

    commission = 10  # 10—Ä –∫–æ–º–∏—Å—Å–∏—è

    if taxi.balance < commission:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏!\n\n")
        return

    if taxi.shift_count > 3:
        taxi.balance -= commission
        taxi.save()
        await bot.send_message(group_id,
                               f'üü¢ –°–ø–∏—Å–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –∑–∞–∫–∞–∑ #{order.id} —Å <b>{taxi.name} {taxi.car} {taxi.registration_number}</b> - –±–∞–ª–∞–Ω—Å {taxi.balance}',
                               parse_mode='html')
    else:
        await bot.send_message(group_id,
                               f'üü° –ó–∞–∫–∞–∑ #{order.id}. –£ <b>{taxi.name} {taxi.car} {taxi.registration_number}</b> –æ—Å—Ç–∞–ª–æ—Å—å {3 - taxi.shift_count} –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏!',
                               parse_mode='html')

    order.status = OrderStatus.TRIP
    order.save()

    await bot.send_message(
        chat_id=order.user_id,
        text=f"üöïüí® –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—Å—Ç–µ–≥–Ω–∏—Ç–µ —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏‚ù§Ô∏è"
    )

    await bot.edit_message_reply_markup(
        chat_id=taxi_id,
        message_id=callback_query.message.message_id,
        reply_markup=get_end_trip_button(order_id)
    )

    await bot.answer_callback_query(callback_query.id)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ban_passenger_'))
async def process_ban_passenger_callback(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.split('_')[-1]

    await state.update_data(order_id=order_id, taxi_id=callback_query.from_user.id)
    await BanPassengerStates.waiting_for_reason.set()

    cancel_button = InlineKeyboardButton("üôÖ‚Äç‚ôÇÔ∏è –Ø –ø–µ—Ä–µ–¥—É–º–∞–ª", callback_data="cancel_ban_process")
    markup = InlineKeyboardMarkup().add(cancel_button)

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞: ",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == 'cancel_ban_process', state=BanPassengerStates.waiting_for_reason)
async def process_cancel_ban(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data['order_id']

    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=f"üëå –ü—Ä–æ—Ü–µ—Å—Å –±–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω. –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")

    await state.finish()


@dp.message_handler(state=BanPassengerStates.waiting_for_reason, content_types=types.ContentTypes.TEXT)
async def process_ban_reason(message: types.Message, state: FSMContext):
    reason = message.text
    user_data = await state.get_data()
    order_id = user_data['order_id']
    taxi_id = user_data['taxi_id']
    order = get_order_by_id(order_id)
    user = await get_user(order.user_id)
    taxi = await get_taxi(taxi_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = Order.get(Order.id == order_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–∞–Ω–µ
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–∞–∫—Å–∏—Å—Ç–∞
        blocked_users = json.loads(taxi.blocked_users)
        if order.user_id not in blocked_users:
            blocked_users.append(order.user_id)
            taxi.blocked_users = json.dumps(blocked_users)
            taxi.save()

        if order.status != "COMPLETED":
            taxi.is_busy = False
            taxi.save()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
            await bot.send_message(taxi_id,
                                   f"‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä {user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}.")

            await bot.send_message(group_id,
                                   f"üö´ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–∞—Å—Å–∞–∂–∏—Ä–∞ <b>{user.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.",
                                   parse_mode='html')

            await bot.send_message(order.user_id, f"üòí –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ç–∞–∫—Å–∏—Å—Ç–æ–º.")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'canceled'
            order.status = OrderStatus.CANCELED
            order.save()
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
            await bot.send_message(taxi_id,
                                   f"‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä {user.name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

            await bot.send_message(group_id,
                                   f"üö´ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–∞—Å—Å–∞–∂–∏—Ä–∞ <b>{user.name}</b> –ø–æ –ø—Ä–∏—á–∏–Ω–µ: <b>{reason}</b>.",
                                   parse_mode='html')

    except DoesNotExist:
        await bot.send_message(taxi_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±–∞–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {e}")
        await bot.send_message(taxi_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.")

    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
