import asyncio
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.add_to_db import save_sent_messages
from database.delite_from_db import delete_sent_messages
from database.get_to_db import get_order_by_id, get_taxi, get_sent_messages
from handlers.taxi_handlers import main_menu_taxi
from loader import dp, bot
from states.order_states import OrderStatus


def send_confirmation_buttons(taxi_id, order_id, price):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{order_id}_{taxi_id}_{price}')
    item2 = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f'decline_{order_id}_{taxi_id}')
    markup.add(item1, item2)

    return markup


def send_confirmation_buttons_def(taxi_id, order_id, price):
    markup = InlineKeyboardMarkup(row_width=2)
    item1 = InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data=f'defrconfirm_{order_id}_{taxi_id}_{price}')
    item2 = InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f'decline_{order_id}_{taxi_id}')
    markup.add(item1, item2)

    return markup


@dp.callback_query_handler(lambda c: 'defrconfirm_' in c.data)
async def process_order_defer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    _, order_id, taxi_id, price = callback_query.data.split("_", 3)
    order_id = int(order_id)
    taxi_id = int(taxi_id)
    price = int(price)
    taxi = await get_taxi(taxi_id)

    order = get_order_by_id(order_id)
    order.cost = price
    order.deferred_by = taxi_id
    order.status = OrderStatus.DEFERRED
    order.save()
    await bot.edit_message_text(text="‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ª–æ–∂–µ–Ω\n\n"
                                     "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(order.user_id,
                           f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å <b>{taxi.name}</b> –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!\n\n"
                           f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ",
                           parse_mode='html')

    # –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤, –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    sent_messages = get_sent_messages(order_id)
    for user_id, message_id in sent_messages:
        if user_id != taxi_id:
            await bot.delete_message(chat_id=user_id, message_id=message_id)

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∞–∫—Å–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–∂–∏–ª –∑–∞–∫–∞–∑
    try:
        save_sent_messages(order_id, [(taxi_id, message_id)])
    except UnboundLocalError:
        pass


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'))
async def process_confirm_callback(callback_query: types.CallbackQuery):
    _, order_id, taxi_id, price = callback_query.data.split("_", 3)
    order_id = int(order_id)
    taxi_id = int(taxi_id)
    price = int(price)
    taxi = await get_taxi(taxi_id)

    if taxi.balance <= 0:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞!\n\n")
        return

    if taxi.is_busy:
        await bot.answer_callback_query(callback_query.id, show_alert=True,
                                        text="‚õîÔ∏è –í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑.\n\n")
        return

    order = get_order_by_id(order_id)

    if order.taxi_id is not None:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text="ü§∑‚Äç‚ôÇÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º —Ç–∞–∫—Å–∏—Å—Ç–æ–º."
        )
        return

    order.taxi_id = taxi_id
    order.cost = price
    order.status = OrderStatus.ACCEPTED
    order.save()

    taxi.shift_count += 1
    taxi.is_busy = True
    taxi.save()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö —Ç–∞–∫—Å–∏—Å—Ç–æ–≤
    sent_messages = get_sent_messages(order.id)
    for user_id, message_id in sent_messages:
        if user_id != taxi_id:
            try:
                await bot.delete_message(chat_id=user_id, message_id=message_id)
                await asyncio.sleep(0.2)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ø—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã) {user_id}: {e}")

    delete_sent_messages(order.id)

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫–∞–∑!")

    await main_menu_taxi.main_menu_taxi(callback_query.message)

    await bot.send_message(order.user_id,
                           "üöï –í–æ–¥–∏—Ç–µ–ª—å –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º\n\n"
                           "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
@dp.callback_query_handler(lambda c: c.data.startswith('decline_'))
async def process_decline_callback(callback_query: types.CallbackQuery):
    _, order_id, taxi_id = callback_query.data.split("_", 2)
    order_id = int(order_id)
    order = get_order_by_id(order_id)

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text="‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.")

    await bot.send_message(order.user_id, "‚ùå –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n"
                                          "–ñ–¥—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
